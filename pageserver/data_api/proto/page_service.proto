// Page service presented by pageservers, for computes
//
// Each request must come with the following metadata:
// - neon-tenant-id
// - neon-timeline-id
// - neon-auth-token (if auth is enabled)
//
// TODO: what else? Priority? OpenTelemetry tracing?
//

syntax = "proto3";
package page_service;

service PageService {
  rpc RelExists(RelExistsRequest) returns (RelExistsResponse);

  // Returns size of a relation, as # of blocks
  rpc RelSize (RelSizeRequest) returns (RelSizeResponse);

  // Fetches a page.
  rpc GetPage (GetPageRequest) returns (GetPageResponse);

  // Streaming GetPage protocol.
  rpc GetPages (stream GetPageRequest) returns (stream GetPageResponse);

  // Returns total size of a database, as # of bytes
  rpc DbSize (DbSizeRequest) returns (DbSizeResponse);

  rpc GetBaseBackup (GetBaseBackupRequest) returns (stream GetBaseBackupResponseChunk);
}

message RequestCommon {
  uint64 request_lsn = 1;
  uint64 not_modified_since_lsn = 2;
}

message RelTag {
    uint32 spc_oid = 1;
    uint32 db_oid = 2;
    uint32 rel_number = 3;
    uint32 fork_number = 4;
}

message RelExistsRequest {
  RequestCommon common = 1;
  RelTag rel = 2;
}

message RelExistsResponse {
  bool exists = 1;
}

message RelSizeRequest {
  RequestCommon common = 1;
  RelTag rel = 2;
}

message RelSizeResponse {
  uint32 num_blocks = 1;
}

message GetPageRequest {
  RequestCommon common = 1;
  RelTag rel = 2;
  uint32 block_number = 3;
}

message GetPageResponse {
  bytes page_image = 1;
}

message DbSizeRequest {
  RequestCommon common = 1;
  uint32 db_oid = 2;
}

message DbSizeResponse {
  uint64 num_bytes = 1;
}

message GetBaseBackupRequest {
  RequestCommon common = 1;
  bool replica = 2;
}

message GetBaseBackupResponseChunk {
  bytes chunk = 1;
}
